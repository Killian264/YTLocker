	// playlist := models.Playlist{
	// 	Title:       "Cool Playlist",
	// 	Description: "Super COOL PLAYLIST THAT was autogenerated by magic!!!!!",
	// }

	// _, err = s.playlist.CreatePlaylist(playlist)
	// if err != nil {
	// 	s.logger.Print(err)
	// }

	// playlist := models.Playlist{
	// 	PlaylistID: "qqq",
	// }

	// err = s.playlist.PlaylistInsert(playlist, models.Video{
	// 	VideoID: "qqq",
	// })
	// if err != nil {
	// 	s.logger.Print(err)
	// }

	// err = s.playlist.PlaylistInsert(playlist, models.Video{
	// 	VideoID: "qqq",
	// })
	// if err != nil {
	// 	s.logger.Print(err)
	// }


	// configData, err := s.dataService.GetFirstYoutubeClientConfig()
// if err != nil {
// 	return err
// }

// tokenData, err := s.dataService.GetFirstYoutubeToken()
// if err != nil {
// 	return err
// }

// config := parsers.ParseYoutubeClient(*configData)
// token := parsers.ParseYoutubeToken(*tokenData)

/*

for every user
	for each playlist
		get all videos in last day .......

*/



// ChannelHandler handler to mess around with yt api
func (s *Services) ChannelHandler(w http.ResponseWriter, r *http.Request) {

	vars := mux.Vars(r)
	channel, err := s.youtube.GetChannel(vars["channel_id"])
	if err != nil || channel == nil {
		return
	}

	fmt.Print("====================================================================\n")
	fmt.Print(channel.Snippet.Title)
	fmt.Print("\n\n")
	fmt.Print(channel.Snippet.Description)
	fmt.Print("\n\n")
	fmt.Print("====================================================================\n")

	parsedChannel := parsers.ParseYTChannel(channel)

	err = s.data.NewChannel(&parsedChannel)

	if err != nil {
		log.Print(err)
	}

	log.Print("Channel ID: ", parsedChannel.ChannelID)

	log.Print("Description: ", parsedChannel.Description, "\n\n")

	for _, thumbnail := range parsedChannel.Thumbnails {
		log.Print(thumbnail.Height)
	}
}

// VideoHandler handler to mess around with yt api
func (s *Services) VideoHandler(w http.ResponseWriter, r *http.Request) {

	vars := mux.Vars(r)
	video, err := s.youtube.GetVideo(vars["video_id"])
	if err != nil || video == nil {
		return
	}

	fmt.Print("====================================================================\n")
	fmt.Print(video.Snippet.Title)
	fmt.Print("\n\n")
	fmt.Print(video.Snippet.Description)
	fmt.Print("\n\n")
	fmt.Print("====================================================================\n")

	parsedVideo, channelID := parsers.ParseYTVideo(video)

	s.data.NewVideo(&parsedVideo, channelID)

}

	s.router.HandleFunc("/channel/{channel_id}", func(w http.ResponseWriter, r *http.Request) {
		s.ChannelHandler(w, r)
	})

	s.router.HandleFunc("/video/{video_id}", func(w http.ResponseWriter, r *http.Request) {
		s.VideoHandler(w, r)
	})
