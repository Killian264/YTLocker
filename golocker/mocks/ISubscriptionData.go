// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	models "github.com/Killian264/YTLocker/golocker/models"
	mock "github.com/stretchr/testify/mock"
)

// ISubscriptionData is an autogenerated mock type for the ISubscriptionData type
type ISubscriptionData struct {
	mock.Mock
}

// DeleteSubscription provides a mock function with given fields: sub
func (_m *ISubscriptionData) DeleteSubscription(sub *models.SubscriptionRequest) error {
	ret := _m.Called(sub)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.SubscriptionRequest) error); ok {
		r0 = rf(sub)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetChannel provides a mock function with given fields: channelID
func (_m *ISubscriptionData) GetChannel(channelID string) (*models.Channel, error) {
	ret := _m.Called(channelID)

	var r0 *models.Channel
	if rf, ok := ret.Get(0).(func(string) *models.Channel); ok {
		r0 = rf(channelID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Channel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(channelID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInactiveSubscription provides a mock function with given fields:
func (_m *ISubscriptionData) GetInactiveSubscription() (*models.SubscriptionRequest, error) {
	ret := _m.Called()

	var r0 *models.SubscriptionRequest
	if rf, ok := ret.Get(0).(func() *models.SubscriptionRequest); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SubscriptionRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubscription provides a mock function with given fields: secret, channelID
func (_m *ISubscriptionData) GetSubscription(secret string, channelID string) (*models.SubscriptionRequest, error) {
	ret := _m.Called(secret, channelID)

	var r0 *models.SubscriptionRequest
	if rf, ok := ret.Get(0).(func(string, string) *models.SubscriptionRequest); ok {
		r0 = rf(secret, channelID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SubscriptionRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(secret, channelID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InactivateAllSubscriptions provides a mock function with given fields:
func (_m *ISubscriptionData) InactivateAllSubscriptions() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSubscription provides a mock function with given fields: request
func (_m *ISubscriptionData) NewSubscription(request *models.SubscriptionRequest) error {
	ret := _m.Called(request)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.SubscriptionRequest) error); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewVideo provides a mock function with given fields: video, channelID
func (_m *ISubscriptionData) NewVideo(video *models.Video, channelID string) error {
	ret := _m.Called(video, channelID)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Video, string) error); ok {
		r0 = rf(video, channelID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
