package ytservice

import (
	"context"
	"fmt"

	"golang.org/x/oauth2"
	"google.golang.org/api/youtube/v3"
)

type YTPlaylist struct {
	playlist *youtube.PlaylistsService
	items    *youtube.PlaylistItemsService
}

// Initalize sets the oauth and token information for the next requests.
// Config data must match the playlist that is being inserted into
// Token data should be app level information
func (s *YTPlaylist) Initialize(config oauth2.Config, token oauth2.Token) error {

	client := config.Client(context.Background(), &token)

	service, err := youtube.New(client)
	if err != nil {
		return err
	}

	s.playlist = youtube.NewPlaylistsService(service)
	s.items = youtube.NewPlaylistItemsService(service)

	return nil
}

// Create creates a playlist
func (s *YTPlaylist) Create(title string, description string) (*youtube.Playlist, error) {

	parts := []string{"id", "snippet", "status"}

	ytPlaylist := &youtube.Playlist{
		Snippet: &youtube.PlaylistSnippet{
			Title:       title,
			Description: fmt.Sprint(description, "\n\n", "Auto-generated by YTLocker."),
		},
		Status: &youtube.PlaylistStatus{
			PrivacyStatus: "unlisted",
		},
	}

	call := s.playlist.Insert(parts, ytPlaylist)
	response, err := call.Do()

	if err != nil {
		return nil, err
	}

	return response, err
}

// Insert inserts a video into a given playlist
func (s *YTPlaylist) Insert(playlistID string, videoID string) error {

	parts := []string{"id", "snippet"}

	item := &youtube.PlaylistItem{
		Id: videoID,
		Snippet: &youtube.PlaylistItemSnippet{
			PlaylistId: playlistID,
			ResourceId: &youtube.ResourceId{
				Kind:    "youtube#video",
				VideoId: videoID,
			},
			Position: 0,
			ForceSendFields: []string{"Position"},
		},
	}

	call := s.items.Insert(parts, item)

	_, err := call.Do()
	if err != nil {
		return err
	}

	return err
}
