package playlist

import (
	"context"
	"fmt"
	"log"

	"github.com/Killian264/YTLocker/golocker/interfaces"
	"github.com/Killian264/YTLocker/golocker/models"
	"github.com/Killian264/YTLocker/golocker/parsers"
	"google.golang.org/api/youtube/v3"
)

type Playlister struct {
	dataService interfaces.IPlaylistData
	logger      *log.Logger
	playlist    *youtube.PlaylistsService
}

func NewPlaylister(data interfaces.IPlaylistData, logger *log.Logger) *Playlister {
	return &Playlister{
		dataService: data,
		logger:      logger,
	}
}

func (s *Playlister) SetDefaultConfig(config models.YoutubeClientConfig) error {
	saved, err := s.dataService.GetYoutubeClientConfigByClientID(config.ClientID)
	if err != nil {
		return err
	}

	if saved != nil {
		return fmt.Errorf("youtube client config already exists")
	}

	return s.dataService.NewYoutubeClientConfig(&config)
}

func (s *Playlister) SetDefaultToken(token models.YoutubeToken) error {
	saved, err := s.dataService.GetYoutubeTokenByAccessToken(token.AccessToken)
	if err != nil {
		return err
	}

	if saved != nil {
		return fmt.Errorf("youtube access token already exists")
	}

	return s.dataService.NewYoutubeToken(&token)
}

func (s *Playlister) Initalize() error {
	configData, err := s.dataService.GetFirstYoutubeClientConfig()
	if err != nil {
		return err
	}

	tokenData, err := s.dataService.GetFirstYoutubeToken()
	if err != nil {
		return err
	}

	config := parsers.ParseYoutubeClient(*configData)
	token := parsers.ParseYoutubeToken(*tokenData)
	client := config.Client(context.Background(), &token)

	service, err := youtube.New(client)
	if err != nil {
		panic("error creating youtube service")
	}

	playlist := youtube.NewPlaylistsService(service)

	s.playlist = playlist

	return nil
}

func (s *Playlister) CreatePlaylist() error {

	parts := []string{"id", "snippet"}

	playlist := youtube.Playlist{
		Snippet: &youtube.PlaylistSnippet{
			Title: "Autogenerated playlist for YTLocker",
		},
	}
	call := s.playlist.Insert(parts, &playlist)

	_, err := call.Do()

	return err

}
